
import psycopg2
logging.basicConfig(level=logging.INFO)
bot = Bot(token="5698068722:AAHHYhhRj_uRFOOD8ngtVaPxlQH9yLI8XOQ")
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    connection = psycopg2.connect(user="postgres",
                                  # –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PostgreSQL
                                  password="data",
                                  host="127.0.0.1",
                                  port="5432",
                                  database="postgres_db")
    cursor = connection.cursor()
    cursor.execute("insert into kolesa (id,status) values(%s,%s)",[message.message_id,0])
    connection.commit()
    connection.close()
    name=message.from_user
    builder = types.InlineKeyboardMarkup()
    builder.add(types.InlineKeyboardButton(
        text="–û—Ñ–æ—Ä–º–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
        callback_data="1")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ê—Ä—Ö–∏–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
        callback_data="2")
    )
    builder.add(types.InlineKeyboardButton(
        text="–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤",
        callback_data="3")
    )
    builder.add(types.InlineKeyboardButton(
        text="–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
        url="https://t.me/ad_mi_ni_st_ra_tor")
    )
    builder.add(types.InlineKeyboardButton(
        text="–£–∑–Ω–∞—Ç—å —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å",
        callback_data="4")
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, "+str(name.first_name)+" üì¢–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –í—ã –ª–µ–≥–∫–æ —Å–º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ —Å–≤–æ–µ–≥–æ –∞–≤—Ç–æ, –º–æ—Ç–æ—Ü–∏–∫–ª–∞ –∏–ª–∏ –∫–æ–ª–µ—Å/—à–∏–Ω. \n\n  –ß—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—É–Ω–∫—Ç '–û—Ñ–æ—Ä–º–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ' –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é: ‚¨áÔ∏è",
        reply_markup=builder
    )

@dp.callback_query_handler(text='0')
async def cmd_start(callback: types.CallbackQuery):
    builder = types.InlineKeyboardMarkup()
    builder.add(types.InlineKeyboardButton(
        text="–û—Ñ–æ—Ä–º–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
        callback_data="1")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ê—Ä—Ö–∏–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
        callback_data="2")
    )
    builder.add(types.InlineKeyboardButton(
        text="–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤",
        callback_data="3")
    )
    builder.add(types.InlineKeyboardButton(
        text="–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
        url="https://t.me/ad_mi_ni_st_ra_tor")
    )
    builder.add(types.InlineKeyboardButton(
        text="–£–∑–Ω–∞—Ç—å —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å",
        callback_data="4")
    )
    await callback.message.answer(
                "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, "+str(callback.message.from_user.first_name)+" üì¢–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –í—ã –ª–µ–≥–∫–æ —Å–º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ —Å–≤–æ–µ–≥–æ –∞–≤—Ç–æ, –º–æ—Ç–æ—Ü–∏–∫–ª–∞ –∏–ª–∏ –∫–æ–ª–µ—Å/—à–∏–Ω. \n\n  –ß—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—É–Ω–∫—Ç '–û—Ñ–æ—Ä–º–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ' –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é: ‚¨áÔ∏è",
        reply_markup=builder
    )

@dp.callback_query_handler(text="3")
async def send_random_value(callback: types.CallbackQuery):
    builder = types.InlineKeyboardMarkup()
    builder.add(types.InlineKeyboardButton(
        text="–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        url="https://t.me/auto_97")
    )
    builder.add(types.InlineKeyboardButton(
        text="–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω",
        url="https://t.me/auto_16")
    )
    builder.add(types.InlineKeyboardButton(
        text="–†–°–û-–ê–ª–∞–Ω–∏—è",
        url="https://t.me/auto_15")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        url="https://t.me/auto_52")
    )
    await callback.message.answer(
        "–ù–∏–∂–µ —Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã , –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª",
        reply_markup=builder
    )


@dp.callback_query_handler(text="1")
async def cmd_start(callback: types.CallbackQuery):
    builder = types.InlineKeyboardMarkup()
    builder.add(types.InlineKeyboardButton(
        text="–ê–≤—Ç–æ–º–æ–±–∏–ª—å",
        callback_data="11")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ú–æ—Ç–æ—Ü–∏–∫–ª",
        callback_data="12")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ö–æ–ª–µ—Å–∞/–®–∏–Ω—ã",
        callback_data="13")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="14",)
    )

    await callback.message.answer(
        "–í—ã–±–µ—Ä–µ—Ç —Ä–∞–∑–¥–µ–ª —Å–≤–æ–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
        reply_markup=builder
    )

@dp.callback_query_handler(text="14")
async def cmd_start(callback: types.CallbackQuery):
    builder = types.InlineKeyboardMarkup()
    builder.add(types.InlineKeyboardButton(
        text="–û—Ñ–æ—Ä–º–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
        callback_data="1")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ê—Ä—Ö–∏–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
        callback_data="2")
    )
    builder.add(types.InlineKeyboardButton(
        text="–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤",
        callback_data="3")
    )
    builder.add(types.InlineKeyboardButton(
        text="–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
        url="https://t.me/ad_mi_ni_st_ra_tor")
    )
    builder.add(types.InlineKeyboardButton(
        text="–£–∑–Ω–∞—Ç—å —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å",
        callback_data="5")
    )
    await callback.message.answer(
                        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, "+str(callback.message.from_user.first_name)+" üì¢–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –í—ã –ª–µ–≥–∫–æ —Å–º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ —Å–≤–æ–µ–≥–æ –∞–≤—Ç–æ, –º–æ—Ç–æ—Ü–∏–∫–ª–∞ –∏–ª–∏ –∫–æ–ª–µ—Å/—à–∏–Ω. \n\n  –ß—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—É–Ω–∫—Ç '–û—Ñ–æ—Ä–º–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ' –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é: ‚¨áÔ∏è",
        reply_markup=builder
    )

@dp.callback_query_handler(text="13")
async def cmd_start(callback: types.CallbackQuery):
    builder = types.InlineKeyboardMarkup()
    builder.add(types.InlineKeyboardButton(
        text="–ö–æ–ª–µ—Å–∞",
        callback_data="21")
    )
    builder.add(types.InlineKeyboardButton(
        text="–®–∏–Ω—ã",
        callback_data="22")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="1")
    )
    await callback.message.answer(
    "üì°–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ—Å—Ç, —Å–ª–µ–¥—É–π—Ç–µ –ø–æ—ç—Ç–∞–ø–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n   üìå–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:" ,
        reply_markup=builder
    )
@dp.callback_query_handler(text="21")
async def cmd_start(callback: types.CallbackQuery):
    builder = types.InlineKeyboardMarkup()
    connection = psycopg2.connect(user="postgres",
                                  # –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PostgreSQL
                                  password="data",
                                  host="127.0.0.1",
                                  port="5432",
                                  database="postgres_db")
    cursor = connection.cursor()

    cursor.execute("insert into kolesa (id,status) values(%s,%s)", [callback.message.message_id, 0])
    connection.commit()
    connection.close()
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="14")
    )
    await callback.message.answer(
    "üì°–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ—Å—Ç, —Å–ª–µ–¥—É–π—Ç–µ –ø–æ—ç—Ç–∞–ø–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n   üñº–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–æ–ª–µ—Å –Ω–∞–ø—Ä–æ–¥–∞–∂—É." ,
        reply_markup=builder
    )

@dp.message_handler(content_types="photo")
async def download_photo(message: types.Message):
    await bot.download_file_by_id(message.photo[-1].file_id,'text.jpeg')
    builder = types.InlineKeyboardMarkup()
    builder.add(types.InlineKeyboardButton(
        text="–ë/–£",
        callback_data="30")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–æ–≤–æ–µ",
        callback_data="30")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="21")
    )
    await message.answer("üõ†–£–∫–∞–∂–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–ª–µ—Å.",reply_markup=builder)


@dp.callback_query_handler(text="30")
async def cmd_start(callback: types.CallbackQuery):
    builder = types.InlineKeyboardMarkup()
    builder.add(types.InlineKeyboardButton(
        text="–õ–µ—Ç–Ω–∏–µ",
        callback_data="40")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ó–∏–º–Ω–∏–µ",
        callback_data="40")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="21")
    )
    connection = psycopg2.connect(user="postgres",
                                  # –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PostgreSQL
                                  password="data",
                                  host="127.0.0.1",
                                  port="5432",
                                  database="postgres_db")
    cursor = connection.cursor()
    cursor.execute("update loxi set status=1 where id='2'")
    connection.commit()
    connection.close()
    await callback.message.answer(
    "‚òÄÔ∏è/‚ùÑÔ∏è–£–∫–∞–∂–∏—Ç–µ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∫–æ–ª–µ—Å..\n  " ,
        reply_markup=builder
    )

@dp.callback_query_handler(text="40")
async def cmd_start(callback: types.CallbackQuery):
    builder = types.InlineKeyboardMarkup()
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="30")
    )
    await callback.message.answer(
    "üñä–£–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª—ë—Å–∞—Ö. \n\n  –ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å, –º–æ–¥–µ–ª—å, –¥–∏–∞–º–µ—Ç—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–ø—ë–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ä—Å—Ç–∏–π –∏ –¥—Ä—É–≥–æ–µ." ,
        reply_markup=builder
    )
@dp.callback_query_handler(text='80')
async  def opisanie2(callback:types.CallbackQuery):
    builder = types.InlineKeyboardMarkup()
    builder.add(types.InlineKeyboardButton(
        text="–†—É–±–ª—å",
        callback_data="50")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ì—Ä–∏–≤–Ω—ã",
        callback_data="50")
    )
    builder.add(types.InlineKeyboardButton(
        text="–¢–µ–Ω–≥–µ",
        callback_data="50")
    )
    builder.add(types.InlineKeyboardButton(
        text="–°—É–º–º—ã",
        callback_data="50")
    )
    builder.add(types.InlineKeyboardButton(
        text="–î–æ–ª–ª–∞—Ä",
        callback_data="50")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ï–≤—Ä–æ",
        callback_data="50")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="40")
    )
    await callback.message.answer(
        "üí±–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞ –∫–æ–ª–µ—Å.",
        reply_markup=builder)
@dp.message_handler()
async  def opisanie(message:types.Message):
    connection = psycopg2.connect(user="postgres",
                                  # –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PostgreSQL
                                  password="data",
                                  host="127.0.0.1",
                                  port="5432",
                                  database="postgres_db")
    cursor = connection.cursor()
    cursor.execute("select status from loxi where id='2'")
    a = cursor.fetchall()
    status=a[0][0]
    if status==1:
        builder = types.InlineKeyboardMarkup()
        builder.add(types.InlineKeyboardButton(
            text="–†—É–±–ª—å",
            callback_data="50")
        )
        builder.add(types.InlineKeyboardButton(
            text="–ì—Ä–∏–≤–Ω—ã",
            callback_data="50")
        )
        builder.add(types.InlineKeyboardButton(
            text="–¢–µ–Ω–≥–µ",
            callback_data="50")
        )
        builder.add(types.InlineKeyboardButton(
            text="–°—É–º–º—ã",
            callback_data="50")
        )
        builder.add(types.InlineKeyboardButton(
            text="–î–æ–ª–ª–∞—Ä",
            callback_data="50")
        )
        builder.add(types.InlineKeyboardButton(
            text="–ï–≤—Ä–æ",
            callback_data="50")
        )
        builder.add(types.InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data="40")
        )
        cursor.execute("update loxi set status=2 where id='2'")
        connection.commit()
        connection.close()
        await message.answer(
            "üí±–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞ –∫–æ–ª–µ—Å.",
            reply_markup=builder)

    if status == 2:
        builder = types.InlineKeyboardMarkup()
        builder.add(types.InlineKeyboardButton(
            text="–ú–æ—Å–∫–æ–≤—Å–∫–∞—è",
            callback_data="60"))
        builder.add(types.InlineKeyboardButton(
            text="–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è",
            callback_data="60"))
        builder.add(types.InlineKeyboardButton(
            text="–†–°–û",
            callback_data="60"))
        builder.add(types.InlineKeyboardButton(
            text="–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω",
            callback_data="60"))
        builder.add(types.InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data="50"))
        await message.answer(
            "üåç–£–∫–∞–∂–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å/—Ä–µ—Å–ø—É–±–ª–∏–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–¥–∞–µ—Ç–µ –∫–æ–ª–µ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏:üëá",
            reply_markup=builder
        )
        cursor.execute("update loxi set status=3 where id='2'")
        connection.commit()
        connection.close()
    if status==3:
        builder = types.InlineKeyboardMarkup()
        builder.add(types.InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data="60"))
        await message.answer(
            "üìû–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: –ù–∞–ø—Ä–∏–º–µ—Ä: +71231234567",
            reply_markup=builder
        )
        cursor.execute("update loxi set status=4 where id='2'")
        connection.commit()
        connection.close()
    if status==4:
        builder = types.InlineKeyboardMarkup()
        builder.add(types.InlineKeyboardButton(
            text="–î",
            callback_data="70"))
        builder.add(types.InlineKeyboardButton(
            text="–ù–µ—Ç",
            callback_data="70"))
        builder.add(types.InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data="60"))
        await message.answer(
            "üì≤–î–æ–±–∞–≤–∏—Ç—å @username –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?",
            reply_markup=builder
        )
        cursor.execute("update loxi set status=1 where id='2'")
        connection.commit()
        connection.close()


@dp.callback_query_handler(text='50')
async def opisanie2(callback: types.CallbackQuery):
    builder = types.InlineKeyboardMarkup()
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="80"))
    connection = psycopg2.connect(user="postgres",
                                  # –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PostgreSQL
                                  password="data",
                                  host="127.0.0.1",
                                  port="5432",
                                  database="postgres_db")
    cursor = connection.cursor()
    cursor.execute("update loxi set status=2 where id='2'")
    connection.commit()
    connection.close()
    await callback.message.answer(
                "üí≤–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ:",
                reply_markup=builder
        )
@dp.callback_query_handler(text='60')
async def opisanie2(callback: types.CallbackQuery):
    builder = types.InlineKeyboardMarkup()
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="50"))
    connection = psycopg2.connect(user="postgres",
                                  # –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PostgreSQL
                                  password="data",
                                  host="127.0.0.1",
                                  port="5432",
                                  database="postgres_db")
    cursor = connection.cursor()
    cursor.execute("update loxi set status=3 where id='2'")
    connection.commit()
    connection.close()
    await callback.message.answer(
                "üåç–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –æ—Å–º–æ—Ç—Ä–∞ (–≥–æ—Ä–æ–¥, –ø–æ—Å–µ–ª–æ–∫, –¥–µ—Ä–µ–≤–Ω—è, –ø—Ä–∏–≥–æ—Ä–æ–¥) –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏/—Ä–µ—Å–ø—É–±–ª–∏–∫–∏.",
                reply_markup=builder
        )

@dp.callback_query_handler(text='70')
async def opisanie2(callback: types.CallbackQuery):
    await callback.message.answer('‚úÖ–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!')
    builder = types.InlineKeyboardMarkup()
    builder.add(types.InlineKeyboardButton(
        text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ",
        callback_data="100"))
    builder.add(types.InlineKeyboardButton(
        text="–û—Ç–º–µ–Ω–∏—Ç—å ",
        callback_data="10000"))
    await callback.message.answer(
        "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–∞ –∫–∞–Ω–∞–ª?",
        reply_markup=builder
    )
@dp.callback_query_handler(text='100')
async def opisanie2(callback: types.CallbackQuery):
    builder = types.InlineKeyboardMarkup()
    builder.add(types.InlineKeyboardButton(
        text="üîÑ–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ",
        callback_data="0"))
    await callback.message.answer(
        "‚úÖ–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!   ‚≠ê–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞.",
        reply_markup=builder
    )

























































































































async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())